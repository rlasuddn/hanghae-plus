// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// MySQL Prisma 공식문서: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// schema 데이터베이스 마이그레이션 cli: npx prisma migrate dev --name ${name}

model Post {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  content   String
  password  String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int        @map("author_id")
  comments  Comments[]
}

model Comments {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int      @map("author_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @map("post_id")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique @map("user_id")
}

model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  name      String     @unique
  joinState Boolean    @default(true) @map("join_state")
  posts     Post[]
  comments  Comments[]
  profile   Profile?
}
